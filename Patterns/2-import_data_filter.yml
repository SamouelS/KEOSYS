filter {
  if [fields][type] == "import_data" {
    
    # Copie "message"(une ligne du fichier log) dans un nouveau champ "message1"
    mutate {
      copy => {"message" => "message1"}
      
    }
    
    # Supprime les debuts de lignes de wrapper de "message1".//////////////////////////attention .*{42}. 
    mutate {
      gsub => ["message1", "^.{42}", ""]
    }
    
    
    grok { 
      # Chemin patterns personnalisé.///////////////////////////////////////////////////////A mettre dans la conf logstash.
      patterns_dir => ["/etc/logstash/patterns/patterns_date"]
      patterns_dir => ["/etc/logstash/patterns/patterns_wrapper"]
      
      # Si match avec "message1" (copie d'une ligne du fichier log), créé les champs : "dateeu, time, log-level et payload" et applique les fonctions suivantes appartenant au plugin grok.
      match => [ "message1", "%{DATE_EU:dateeu}%{SPACE}%{TIME:time}%{SPACE}%{LOGLEVEL:log-level}%{SPACE}-%{SPACE}%{GREEDYDATA:payload}" ]
      
      # Ajoute un champs "logtimestamp" qui a la valeur des champs "dateeu" et "time" créé précédemment.    ! Ne pas oublier l'espace !
      add_field => { "logtimestamp" => "%{dateeu} %{time}" }
    }
    
    # Plugin permettant de gérer les dates. (Entre dans le plugin si match dans grok)
    date {
        # Si "logtimestamp" match avec le bon format date, applique les fonctions suivantes appartenant au plugin "date". (Pour voir les différents formats dates, voir la page "pattern Logstash".)
        match => [ "logtimestamp", "dd/MM/YYYY HH:mm:ss,SSS" ]
        
        # Envoie "logtimestamp" dans le paramètre "@timestamp" de kibana, pour que la ligne en question ai une date correspondant a sa date de création.
        target => "@timestamp"
        locale => "en"
        timezone => "Europe/Paris"
    }
    
    # Si match pas avec le premier filtre il reçoit le tags "_grokparsefailure" et entre dans cette condition.
    if "_grokparsefailure" in [tags] {
    
      grok {
        # Si match avec "message"(une ligne), créé les champs : "dateeu, time, log-level et payload" et applique les fonctions suivantes appartenant au plugin grok.
        match => [ "message", "%{DATE_EU:dateeu}%{SPACE}%{TIME:time}%{SPACE}%{LOGLEVEL:log-level}%{SPACE}-%{SPACE}%{GREEDYDATA:payload}" ]
        
        # Ajoute un champs "logtimestamp" qui a la valeur des champs "dateeu" et "time" créé précédemment.    ! Ne pas oublier l'espace !
        add_field => { "logtimestamp" => "%{dateeu} %{time}" }
        
        # Ajoute un tag "format201805". /////////////////////////////////////////////////////////Verif date de changement 
        add_tag => [ "format201805" ]  
        # Supprime les tags "_grokparsefailure", " _dateparsefailure" car message match avec le bon format.
        remove_tag => [ "_grokparsefailure", " _dateparsefailure" ] 
      }
      
      # Plugin permettant de gérer les dates. (Entre dans le plugin si match dans grok)
      date {
      
        # Si "logtimestamp" match avec le bon format date, applique les fonctions suivantes appartenant au plugin "date".(Pour voir les différents formats dates, voir page "pattern Logstash".)
        match => [ "logtimestamp", "dd/MM/YYYY HH:mm:ss,SSS" ]
        
        # Envoie "logtimestamp" dans le paramètre "@timestamp" de kibana, pour que la ligne en question ai une date correspondant a sa date de création.
        target => "@timestamp"
        locale => "en"
        timezone => "Europe/Paris"
      }
     
    }
    
    # Si match pas avec le premier et deuxième filtre, il contient toujours le tags "_grokparsefailure" et entre dans cette condition.
    if "_grokparsefailure" in [tags] {
    
      grok {
        # Chemin patterns personnalisé.//////////////////////////////////////////////////voir dans conf logstash
        patterns_dir => ["/etc/logstash/patterns/patterns_date"]
        
        # Si match avec "source"(chemin du fichier log), créé le champ : "date" et applique les fonctions suivantes appartenant au plugin grok.///POURQUOI CELA FONCTIONNE !!!
        match => { "source" =>  [ "/*/*/%{DATA:platform}\.%{DATESRC:date}" ] }              
      }
      
      # Plugin permettant de gérer les dates. (Entre dans le plugin si match dans grok)
      date {
      
        # Si "date" match avec le bon format date, applique les fonctions suivantes appartenant au plugin "date".(Pour voir les différents formats dates, voir page "pattern Logstash".)
        match => [ "date", "YYYYMMdd" ]
        
        # Envoie "date" dans le paramètre "@timestamp" de kibana, pour que la ligne en question ai une date correspondant a sa date de création.
        target => "@timestamp"
        locale => "en"
        timezone => "Europe/Paris"
      }
      
    }
    
    
    mutate {
        # Supprime les champs inutile "dateeu", "time", "date, "message1" et "logtimestamp".////////////////// SUPP LE TAG PAR DEFAUT
        remove_field => [ "logtimestamp", "dateeu", "time", "date", "message1" ]
    }
  
  }

}